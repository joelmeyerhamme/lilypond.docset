%% Generated by lilypond-book.py
%% Options: [alt=[image of music],printfilename,indent=0\mm,texidoc,line-width=160\mm]
\include "lilypond-book-preamble.ly"


% ****************************************************************
% Start cut-&-pastable-section
% ****************************************************************



\paper {
  #(define dump-extents #t)
  
  indent = 0\mm
  line-width = 160\mm
  force-assignment = #""
  line-width = #(- line-width (* mm  3.000000))
}

\layout {
  
}



% ****************************************************************
% ly snippet:
% ****************************************************************
\sourcefilename "/main/src/gub/target/linux-x86/src/lilypond-git.sv.gnu.org--lilypond.git-stable-2.12/input/regression/music-function.ly"
\sourcefileline 0
\header
{
    
texidoc = "Music functions are generic music transformation functions,
which can be used to extend music syntax seamlessly.  Here we
demonstrate a @code{\myBar} function, which works similar to
@code{\bar}, but is implemented completely in Scheme."

}
\version "2.12.0"

myBar = #(define-music-function (parser location bar-type) (string?)
          (context-spec-music
           (context-spec-music (make-property-set 'whichBar bar-type) 'Timing)
           'Score))

\layout { ragged-right = ##t }

{
    d4 \myBar "|:" d4
}




% ****************************************************************
% end ly snippet
% ****************************************************************
